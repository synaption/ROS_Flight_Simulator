# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pamplemousse_sensors/filterStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class filterStatus(genpy.Message):
  _md5sum = "6802282c725c35556f638fa802316676"
  _type = "pamplemousse_sensors/filterStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Defines the Filter Status subfields for the Spatial INS System State messagesuint8 orientation_filter_initialised
#
uint8 ins_filter_initialised
uint8 heading_initialised
uint8 utc_time_initialised
uint8 gnss_fix_type
uint8 event1_flag
uint8 event2_flag
uint8 internal_gnss_enabled
uint8 magnetic_heading_enabled
uint8 velocity_heading_enabled
uint8 atmospheric_altitude_enabled
uint8 external_position_active
uint8 external_velocity_active
uint8 external_heading_active"""
  __slots__ = ['ins_filter_initialised','heading_initialised','utc_time_initialised','gnss_fix_type','event1_flag','event2_flag','internal_gnss_enabled','magnetic_heading_enabled','velocity_heading_enabled','atmospheric_altitude_enabled','external_position_active','external_velocity_active','external_heading_active']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ins_filter_initialised,heading_initialised,utc_time_initialised,gnss_fix_type,event1_flag,event2_flag,internal_gnss_enabled,magnetic_heading_enabled,velocity_heading_enabled,atmospheric_altitude_enabled,external_position_active,external_velocity_active,external_heading_active

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(filterStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ins_filter_initialised is None:
        self.ins_filter_initialised = 0
      if self.heading_initialised is None:
        self.heading_initialised = 0
      if self.utc_time_initialised is None:
        self.utc_time_initialised = 0
      if self.gnss_fix_type is None:
        self.gnss_fix_type = 0
      if self.event1_flag is None:
        self.event1_flag = 0
      if self.event2_flag is None:
        self.event2_flag = 0
      if self.internal_gnss_enabled is None:
        self.internal_gnss_enabled = 0
      if self.magnetic_heading_enabled is None:
        self.magnetic_heading_enabled = 0
      if self.velocity_heading_enabled is None:
        self.velocity_heading_enabled = 0
      if self.atmospheric_altitude_enabled is None:
        self.atmospheric_altitude_enabled = 0
      if self.external_position_active is None:
        self.external_position_active = 0
      if self.external_velocity_active is None:
        self.external_velocity_active = 0
      if self.external_heading_active is None:
        self.external_heading_active = 0
    else:
      self.ins_filter_initialised = 0
      self.heading_initialised = 0
      self.utc_time_initialised = 0
      self.gnss_fix_type = 0
      self.event1_flag = 0
      self.event2_flag = 0
      self.internal_gnss_enabled = 0
      self.magnetic_heading_enabled = 0
      self.velocity_heading_enabled = 0
      self.atmospheric_altitude_enabled = 0
      self.external_position_active = 0
      self.external_velocity_active = 0
      self.external_heading_active = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_13B().pack(_x.ins_filter_initialised, _x.heading_initialised, _x.utc_time_initialised, _x.gnss_fix_type, _x.event1_flag, _x.event2_flag, _x.internal_gnss_enabled, _x.magnetic_heading_enabled, _x.velocity_heading_enabled, _x.atmospheric_altitude_enabled, _x.external_position_active, _x.external_velocity_active, _x.external_heading_active))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.ins_filter_initialised, _x.heading_initialised, _x.utc_time_initialised, _x.gnss_fix_type, _x.event1_flag, _x.event2_flag, _x.internal_gnss_enabled, _x.magnetic_heading_enabled, _x.velocity_heading_enabled, _x.atmospheric_altitude_enabled, _x.external_position_active, _x.external_velocity_active, _x.external_heading_active,) = _get_struct_13B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_13B().pack(_x.ins_filter_initialised, _x.heading_initialised, _x.utc_time_initialised, _x.gnss_fix_type, _x.event1_flag, _x.event2_flag, _x.internal_gnss_enabled, _x.magnetic_heading_enabled, _x.velocity_heading_enabled, _x.atmospheric_altitude_enabled, _x.external_position_active, _x.external_velocity_active, _x.external_heading_active))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.ins_filter_initialised, _x.heading_initialised, _x.utc_time_initialised, _x.gnss_fix_type, _x.event1_flag, _x.event2_flag, _x.internal_gnss_enabled, _x.magnetic_heading_enabled, _x.velocity_heading_enabled, _x.atmospheric_altitude_enabled, _x.external_position_active, _x.external_velocity_active, _x.external_heading_active,) = _get_struct_13B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13B = None
def _get_struct_13B():
    global _struct_13B
    if _struct_13B is None:
        _struct_13B = struct.Struct("<13B")
    return _struct_13B
