// Generated by gencpp from file pamplemousse_sensors/filterStatus.msg
// DO NOT EDIT!


#ifndef PAMPLEMOUSSE_SENSORS_MESSAGE_FILTERSTATUS_H
#define PAMPLEMOUSSE_SENSORS_MESSAGE_FILTERSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pamplemousse_sensors
{
template <class ContainerAllocator>
struct filterStatus_
{
  typedef filterStatus_<ContainerAllocator> Type;

  filterStatus_()
    : ins_filter_initialised(0)
    , heading_initialised(0)
    , utc_time_initialised(0)
    , gnss_fix_type(0)
    , event1_flag(0)
    , event2_flag(0)
    , internal_gnss_enabled(0)
    , magnetic_heading_enabled(0)
    , velocity_heading_enabled(0)
    , atmospheric_altitude_enabled(0)
    , external_position_active(0)
    , external_velocity_active(0)
    , external_heading_active(0)  {
    }
  filterStatus_(const ContainerAllocator& _alloc)
    : ins_filter_initialised(0)
    , heading_initialised(0)
    , utc_time_initialised(0)
    , gnss_fix_type(0)
    , event1_flag(0)
    , event2_flag(0)
    , internal_gnss_enabled(0)
    , magnetic_heading_enabled(0)
    , velocity_heading_enabled(0)
    , atmospheric_altitude_enabled(0)
    , external_position_active(0)
    , external_velocity_active(0)
    , external_heading_active(0)  {
  (void)_alloc;
    }



   typedef uint8_t _ins_filter_initialised_type;
  _ins_filter_initialised_type ins_filter_initialised;

   typedef uint8_t _heading_initialised_type;
  _heading_initialised_type heading_initialised;

   typedef uint8_t _utc_time_initialised_type;
  _utc_time_initialised_type utc_time_initialised;

   typedef uint8_t _gnss_fix_type_type;
  _gnss_fix_type_type gnss_fix_type;

   typedef uint8_t _event1_flag_type;
  _event1_flag_type event1_flag;

   typedef uint8_t _event2_flag_type;
  _event2_flag_type event2_flag;

   typedef uint8_t _internal_gnss_enabled_type;
  _internal_gnss_enabled_type internal_gnss_enabled;

   typedef uint8_t _magnetic_heading_enabled_type;
  _magnetic_heading_enabled_type magnetic_heading_enabled;

   typedef uint8_t _velocity_heading_enabled_type;
  _velocity_heading_enabled_type velocity_heading_enabled;

   typedef uint8_t _atmospheric_altitude_enabled_type;
  _atmospheric_altitude_enabled_type atmospheric_altitude_enabled;

   typedef uint8_t _external_position_active_type;
  _external_position_active_type external_position_active;

   typedef uint8_t _external_velocity_active_type;
  _external_velocity_active_type external_velocity_active;

   typedef uint8_t _external_heading_active_type;
  _external_heading_active_type external_heading_active;





  typedef boost::shared_ptr< ::pamplemousse_sensors::filterStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pamplemousse_sensors::filterStatus_<ContainerAllocator> const> ConstPtr;

}; // struct filterStatus_

typedef ::pamplemousse_sensors::filterStatus_<std::allocator<void> > filterStatus;

typedef boost::shared_ptr< ::pamplemousse_sensors::filterStatus > filterStatusPtr;
typedef boost::shared_ptr< ::pamplemousse_sensors::filterStatus const> filterStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pamplemousse_sensors::filterStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pamplemousse_sensors::filterStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pamplemousse_sensors::filterStatus_<ContainerAllocator1> & lhs, const ::pamplemousse_sensors::filterStatus_<ContainerAllocator2> & rhs)
{
  return lhs.ins_filter_initialised == rhs.ins_filter_initialised &&
    lhs.heading_initialised == rhs.heading_initialised &&
    lhs.utc_time_initialised == rhs.utc_time_initialised &&
    lhs.gnss_fix_type == rhs.gnss_fix_type &&
    lhs.event1_flag == rhs.event1_flag &&
    lhs.event2_flag == rhs.event2_flag &&
    lhs.internal_gnss_enabled == rhs.internal_gnss_enabled &&
    lhs.magnetic_heading_enabled == rhs.magnetic_heading_enabled &&
    lhs.velocity_heading_enabled == rhs.velocity_heading_enabled &&
    lhs.atmospheric_altitude_enabled == rhs.atmospheric_altitude_enabled &&
    lhs.external_position_active == rhs.external_position_active &&
    lhs.external_velocity_active == rhs.external_velocity_active &&
    lhs.external_heading_active == rhs.external_heading_active;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pamplemousse_sensors::filterStatus_<ContainerAllocator1> & lhs, const ::pamplemousse_sensors::filterStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pamplemousse_sensors

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pamplemousse_sensors::filterStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pamplemousse_sensors::filterStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pamplemousse_sensors::filterStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pamplemousse_sensors::filterStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pamplemousse_sensors::filterStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pamplemousse_sensors::filterStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pamplemousse_sensors::filterStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6802282c725c35556f638fa802316676";
  }

  static const char* value(const ::pamplemousse_sensors::filterStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6802282c725c3555ULL;
  static const uint64_t static_value2 = 0x6f638fa802316676ULL;
};

template<class ContainerAllocator>
struct DataType< ::pamplemousse_sensors::filterStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pamplemousse_sensors/filterStatus";
  }

  static const char* value(const ::pamplemousse_sensors::filterStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pamplemousse_sensors::filterStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Defines the Filter Status subfields for the Spatial INS System State messagesuint8 orientation_filter_initialised\n"
"#\n"
"uint8 ins_filter_initialised\n"
"uint8 heading_initialised\n"
"uint8 utc_time_initialised\n"
"uint8 gnss_fix_type\n"
"uint8 event1_flag\n"
"uint8 event2_flag\n"
"uint8 internal_gnss_enabled\n"
"uint8 magnetic_heading_enabled\n"
"uint8 velocity_heading_enabled\n"
"uint8 atmospheric_altitude_enabled\n"
"uint8 external_position_active\n"
"uint8 external_velocity_active\n"
"uint8 external_heading_active\n"
;
  }

  static const char* value(const ::pamplemousse_sensors::filterStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pamplemousse_sensors::filterStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ins_filter_initialised);
      stream.next(m.heading_initialised);
      stream.next(m.utc_time_initialised);
      stream.next(m.gnss_fix_type);
      stream.next(m.event1_flag);
      stream.next(m.event2_flag);
      stream.next(m.internal_gnss_enabled);
      stream.next(m.magnetic_heading_enabled);
      stream.next(m.velocity_heading_enabled);
      stream.next(m.atmospheric_altitude_enabled);
      stream.next(m.external_position_active);
      stream.next(m.external_velocity_active);
      stream.next(m.external_heading_active);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct filterStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pamplemousse_sensors::filterStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pamplemousse_sensors::filterStatus_<ContainerAllocator>& v)
  {
    s << indent << "ins_filter_initialised: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ins_filter_initialised);
    s << indent << "heading_initialised: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.heading_initialised);
    s << indent << "utc_time_initialised: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.utc_time_initialised);
    s << indent << "gnss_fix_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gnss_fix_type);
    s << indent << "event1_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.event1_flag);
    s << indent << "event2_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.event2_flag);
    s << indent << "internal_gnss_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.internal_gnss_enabled);
    s << indent << "magnetic_heading_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.magnetic_heading_enabled);
    s << indent << "velocity_heading_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.velocity_heading_enabled);
    s << indent << "atmospheric_altitude_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.atmospheric_altitude_enabled);
    s << indent << "external_position_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.external_position_active);
    s << indent << "external_velocity_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.external_velocity_active);
    s << indent << "external_heading_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.external_heading_active);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAMPLEMOUSSE_SENSORS_MESSAGE_FILTERSTATUS_H
