// Generated by gencpp from file pamplemousse_sensors/systemStatus.msg
// DO NOT EDIT!


#ifndef PAMPLEMOUSSE_SENSORS_MESSAGE_SYSTEMSTATUS_H
#define PAMPLEMOUSSE_SENSORS_MESSAGE_SYSTEMSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pamplemousse_sensors
{
template <class ContainerAllocator>
struct systemStatus_
{
  typedef systemStatus_<ContainerAllocator> Type;

  systemStatus_()
    : system_failure(0)
    , accelerometer_sensor_failure(0)
    , gyroscope_sensor_failure(0)
    , magnetometer_sensor_failure(0)
    , pressure_sensor_failure(0)
    , gnss_failure(0)
    , accelerometer_over_range(0)
    , gyroscope_over_range(0)
    , magnetometer_over_range(0)
    , pressure_over_range(0)
    , minimum_temperature_alarm(0)
    , maximum_temperature_alarm(0)
    , low_voltage_alarm(0)
    , high_voltage_alarm(0)
    , gnss_antenna_disconnected(0)
    , serial_port_overflow_alarm(0)  {
    }
  systemStatus_(const ContainerAllocator& _alloc)
    : system_failure(0)
    , accelerometer_sensor_failure(0)
    , gyroscope_sensor_failure(0)
    , magnetometer_sensor_failure(0)
    , pressure_sensor_failure(0)
    , gnss_failure(0)
    , accelerometer_over_range(0)
    , gyroscope_over_range(0)
    , magnetometer_over_range(0)
    , pressure_over_range(0)
    , minimum_temperature_alarm(0)
    , maximum_temperature_alarm(0)
    , low_voltage_alarm(0)
    , high_voltage_alarm(0)
    , gnss_antenna_disconnected(0)
    , serial_port_overflow_alarm(0)  {
  (void)_alloc;
    }



   typedef uint8_t _system_failure_type;
  _system_failure_type system_failure;

   typedef uint8_t _accelerometer_sensor_failure_type;
  _accelerometer_sensor_failure_type accelerometer_sensor_failure;

   typedef uint8_t _gyroscope_sensor_failure_type;
  _gyroscope_sensor_failure_type gyroscope_sensor_failure;

   typedef uint8_t _magnetometer_sensor_failure_type;
  _magnetometer_sensor_failure_type magnetometer_sensor_failure;

   typedef uint8_t _pressure_sensor_failure_type;
  _pressure_sensor_failure_type pressure_sensor_failure;

   typedef uint8_t _gnss_failure_type;
  _gnss_failure_type gnss_failure;

   typedef uint8_t _accelerometer_over_range_type;
  _accelerometer_over_range_type accelerometer_over_range;

   typedef uint8_t _gyroscope_over_range_type;
  _gyroscope_over_range_type gyroscope_over_range;

   typedef uint8_t _magnetometer_over_range_type;
  _magnetometer_over_range_type magnetometer_over_range;

   typedef uint8_t _pressure_over_range_type;
  _pressure_over_range_type pressure_over_range;

   typedef uint8_t _minimum_temperature_alarm_type;
  _minimum_temperature_alarm_type minimum_temperature_alarm;

   typedef uint8_t _maximum_temperature_alarm_type;
  _maximum_temperature_alarm_type maximum_temperature_alarm;

   typedef uint8_t _low_voltage_alarm_type;
  _low_voltage_alarm_type low_voltage_alarm;

   typedef uint8_t _high_voltage_alarm_type;
  _high_voltage_alarm_type high_voltage_alarm;

   typedef uint8_t _gnss_antenna_disconnected_type;
  _gnss_antenna_disconnected_type gnss_antenna_disconnected;

   typedef uint8_t _serial_port_overflow_alarm_type;
  _serial_port_overflow_alarm_type serial_port_overflow_alarm;





  typedef boost::shared_ptr< ::pamplemousse_sensors::systemStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pamplemousse_sensors::systemStatus_<ContainerAllocator> const> ConstPtr;

}; // struct systemStatus_

typedef ::pamplemousse_sensors::systemStatus_<std::allocator<void> > systemStatus;

typedef boost::shared_ptr< ::pamplemousse_sensors::systemStatus > systemStatusPtr;
typedef boost::shared_ptr< ::pamplemousse_sensors::systemStatus const> systemStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pamplemousse_sensors::systemStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pamplemousse_sensors::systemStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pamplemousse_sensors::systemStatus_<ContainerAllocator1> & lhs, const ::pamplemousse_sensors::systemStatus_<ContainerAllocator2> & rhs)
{
  return lhs.system_failure == rhs.system_failure &&
    lhs.accelerometer_sensor_failure == rhs.accelerometer_sensor_failure &&
    lhs.gyroscope_sensor_failure == rhs.gyroscope_sensor_failure &&
    lhs.magnetometer_sensor_failure == rhs.magnetometer_sensor_failure &&
    lhs.pressure_sensor_failure == rhs.pressure_sensor_failure &&
    lhs.gnss_failure == rhs.gnss_failure &&
    lhs.accelerometer_over_range == rhs.accelerometer_over_range &&
    lhs.gyroscope_over_range == rhs.gyroscope_over_range &&
    lhs.magnetometer_over_range == rhs.magnetometer_over_range &&
    lhs.pressure_over_range == rhs.pressure_over_range &&
    lhs.minimum_temperature_alarm == rhs.minimum_temperature_alarm &&
    lhs.maximum_temperature_alarm == rhs.maximum_temperature_alarm &&
    lhs.low_voltage_alarm == rhs.low_voltage_alarm &&
    lhs.high_voltage_alarm == rhs.high_voltage_alarm &&
    lhs.gnss_antenna_disconnected == rhs.gnss_antenna_disconnected &&
    lhs.serial_port_overflow_alarm == rhs.serial_port_overflow_alarm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pamplemousse_sensors::systemStatus_<ContainerAllocator1> & lhs, const ::pamplemousse_sensors::systemStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pamplemousse_sensors

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pamplemousse_sensors::systemStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pamplemousse_sensors::systemStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pamplemousse_sensors::systemStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pamplemousse_sensors::systemStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pamplemousse_sensors::systemStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pamplemousse_sensors::systemStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pamplemousse_sensors::systemStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff88f32a9d7643d1bcd0f5f56a25b1ec";
  }

  static const char* value(const ::pamplemousse_sensors::systemStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff88f32a9d7643d1ULL;
  static const uint64_t static_value2 = 0xbcd0f5f56a25b1ecULL;
};

template<class ContainerAllocator>
struct DataType< ::pamplemousse_sensors::systemStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pamplemousse_sensors/systemStatus";
  }

  static const char* value(const ::pamplemousse_sensors::systemStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pamplemousse_sensors::systemStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Defines the System Status subfields for the Spatial INS System State messages\n"
"#\n"
"uint8 system_failure\n"
"uint8 accelerometer_sensor_failure\n"
"uint8 gyroscope_sensor_failure\n"
"uint8 magnetometer_sensor_failure\n"
"uint8 pressure_sensor_failure\n"
"uint8 gnss_failure\n"
"uint8 accelerometer_over_range\n"
"uint8 gyroscope_over_range\n"
"uint8 magnetometer_over_range\n"
"uint8 pressure_over_range\n"
"uint8 minimum_temperature_alarm\n"
"uint8 maximum_temperature_alarm\n"
"uint8 low_voltage_alarm\n"
"uint8 high_voltage_alarm\n"
"uint8 gnss_antenna_disconnected\n"
"uint8 serial_port_overflow_alarm\n"
;
  }

  static const char* value(const ::pamplemousse_sensors::systemStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pamplemousse_sensors::systemStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.system_failure);
      stream.next(m.accelerometer_sensor_failure);
      stream.next(m.gyroscope_sensor_failure);
      stream.next(m.magnetometer_sensor_failure);
      stream.next(m.pressure_sensor_failure);
      stream.next(m.gnss_failure);
      stream.next(m.accelerometer_over_range);
      stream.next(m.gyroscope_over_range);
      stream.next(m.magnetometer_over_range);
      stream.next(m.pressure_over_range);
      stream.next(m.minimum_temperature_alarm);
      stream.next(m.maximum_temperature_alarm);
      stream.next(m.low_voltage_alarm);
      stream.next(m.high_voltage_alarm);
      stream.next(m.gnss_antenna_disconnected);
      stream.next(m.serial_port_overflow_alarm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct systemStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pamplemousse_sensors::systemStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pamplemousse_sensors::systemStatus_<ContainerAllocator>& v)
  {
    s << indent << "system_failure: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.system_failure);
    s << indent << "accelerometer_sensor_failure: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.accelerometer_sensor_failure);
    s << indent << "gyroscope_sensor_failure: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gyroscope_sensor_failure);
    s << indent << "magnetometer_sensor_failure: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.magnetometer_sensor_failure);
    s << indent << "pressure_sensor_failure: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pressure_sensor_failure);
    s << indent << "gnss_failure: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gnss_failure);
    s << indent << "accelerometer_over_range: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.accelerometer_over_range);
    s << indent << "gyroscope_over_range: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gyroscope_over_range);
    s << indent << "magnetometer_over_range: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.magnetometer_over_range);
    s << indent << "pressure_over_range: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pressure_over_range);
    s << indent << "minimum_temperature_alarm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.minimum_temperature_alarm);
    s << indent << "maximum_temperature_alarm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.maximum_temperature_alarm);
    s << indent << "low_voltage_alarm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.low_voltage_alarm);
    s << indent << "high_voltage_alarm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.high_voltage_alarm);
    s << indent << "gnss_antenna_disconnected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gnss_antenna_disconnected);
    s << indent << "serial_port_overflow_alarm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.serial_port_overflow_alarm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAMPLEMOUSSE_SENSORS_MESSAGE_SYSTEMSTATUS_H
